"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useThemeObserver = exports.ThemeMutationObserver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _constants = require("./constants");

var getGlobalTheme = function getGlobalTheme() {
  return typeof document !== 'undefined' ? document.documentElement.getAttribute(_constants.COLOR_MODE_ATTRIBUTE) : null;
};
/**
 * A MutationObserver which watches the `<html>` element for changes to the theme.
 *
 * In React, use the {@link useThemeObserver `useThemeObserver`} hook instead.
 *
 * @param {function} callback - A callback function which fires when the theme changes.
 *
 * @example
 * ```
 * const observer = new ThemeMutationObserver((theme) => {});
 * observer.observe();
 * ```
 */


var ThemeMutationObserver = /*#__PURE__*/function () {
  function ThemeMutationObserver(callback) {
    (0, _classCallCheck2.default)(this, ThemeMutationObserver);
    (0, _defineProperty2.default)(this, "observer", null);
    (0, _defineProperty2.default)(this, "mediaObserver", null);
    this.callback = callback;
  }

  (0, _createClass2.default)(ThemeMutationObserver, [{
    key: "observe",
    value: function observe() {
      var _this = this;

      if (!this.observer) {
        this.observer = new MutationObserver(function () {
          _this.callback(getGlobalTheme());
        });
      }

      this.observer.observe(document.documentElement, {
        attributeFilter: [_constants.COLOR_MODE_ATTRIBUTE]
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.observer && this.observer.disconnect();
    }
  }]);
  return ThemeMutationObserver;
}();
/**
 * A React hook which returns the current theme set on `<html>`, or `null` if not set.
 *
 * @example
 * ```
 * const theme = useThemeObserver(); // Returns 'light' or 'dark'
 *
 * // Performing side effects when it changes
 * useEffect(() => {
 *   console.log(`The theme has changed to ${theme}`);
 * }, [theme]);
 * ```
 */


exports.ThemeMutationObserver = ThemeMutationObserver;

var useThemeObserver = function useThemeObserver() {
  var _useState = (0, _react.useState)(getGlobalTheme()),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      theme = _useState2[0],
      setTheme = _useState2[1];

  (0, _react.useEffect)(function () {
    var observer = new ThemeMutationObserver(function (theme) {
      return setTheme(theme);
    });
    observer.observe();
    return function () {
      return observer.disconnect();
    };
  }, []);
  return theme;
};

exports.useThemeObserver = useThemeObserver;