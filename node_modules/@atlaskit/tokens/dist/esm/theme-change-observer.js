import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { useEffect, useState } from 'react';
import { COLOR_MODE_ATTRIBUTE } from './constants';

var getGlobalTheme = function getGlobalTheme() {
  return typeof document !== 'undefined' ? document.documentElement.getAttribute(COLOR_MODE_ATTRIBUTE) : null;
};
/**
 * A MutationObserver which watches the `<html>` element for changes to the theme.
 *
 * In React, use the {@link useThemeObserver `useThemeObserver`} hook instead.
 *
 * @param {function} callback - A callback function which fires when the theme changes.
 *
 * @example
 * ```
 * const observer = new ThemeMutationObserver((theme) => {});
 * observer.observe();
 * ```
 */


export var ThemeMutationObserver = /*#__PURE__*/function () {
  function ThemeMutationObserver(callback) {
    _classCallCheck(this, ThemeMutationObserver);

    _defineProperty(this, "observer", null);

    _defineProperty(this, "mediaObserver", null);

    this.callback = callback;
  }

  _createClass(ThemeMutationObserver, [{
    key: "observe",
    value: function observe() {
      var _this = this;

      if (!this.observer) {
        this.observer = new MutationObserver(function () {
          _this.callback(getGlobalTheme());
        });
      }

      this.observer.observe(document.documentElement, {
        attributeFilter: [COLOR_MODE_ATTRIBUTE]
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.observer && this.observer.disconnect();
    }
  }]);

  return ThemeMutationObserver;
}();
/**
 * A React hook which returns the current theme set on `<html>`, or `null` if not set.
 *
 * @example
 * ```
 * const theme = useThemeObserver(); // Returns 'light' or 'dark'
 *
 * // Performing side effects when it changes
 * useEffect(() => {
 *   console.log(`The theme has changed to ${theme}`);
 * }, [theme]);
 * ```
 */

export var useThemeObserver = function useThemeObserver() {
  var _useState = useState(getGlobalTheme()),
      _useState2 = _slicedToArray(_useState, 2),
      theme = _useState2[0],
      setTheme = _useState2[1];

  useEffect(function () {
    var observer = new ThemeMutationObserver(function (theme) {
      return setTheme(theme);
    });
    observer.observe();
    return function () {
      return observer.disconnect();
    };
  }, []);
  return theme;
};