import { ShadowToken } from '../types';
export declare const hexToRGBAValues: (hex: string) => {
    r: number;
    g: number;
    b: number;
    a: number;
};
export declare const hexToRGBA: (hex: string) => string;
export declare const getLuminance: ({ r, g, b, }: {
    r: number;
    b: number;
    g: number;
}) => number;
/**
 * Returns an accessible hard-coded text color based on the color contrast with
 * the background.
 *
 * @param hex - The Hex color code of the background
 * @param [opts.hardcodedSurface] - If set, a design token will be returned instead
 * of a hard-coded color. This is to support more transparent backgrounds
 * to allow the text to invert colors depending on the current theme's surface color.
 */
export declare const getTextColorForBackground: (hex: string, opts?: {
    hardcodedSurface?: "light" | "dark" | undefined;
} | undefined) => string;
/**
 * Returns a border if determined to be required based on the color contrast with
 * the background.
 *
 * @param hex - The Hex color code of the background
 */
export declare const getBorderForBackground: (hex: string) => string | undefined;
/**
 * Returns a box shadow formatted for CSS from a ShadowToken raw value.
 *
 * @param rawShadow - ShadowToken raw value
 */
export declare const getBoxShadow: (rawShadow: ShadowToken<string>['value']) => string;
